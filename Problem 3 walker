// C++ implementation for the above approach
#include <bits/stdc++.h>
using namespace std;

// Function to print the left path
void printLeftPath(int i, int j, int K)
{
	if (K & 1) {
		// j->i->j->i->j->k->j->k->j
		for (int p = 0; p < K; p++) {
			if (p & 1) {
				cout << i << " ";
			}
			else {
				cout << j << " ";
			}
		}
	}
	else {
		// i->j->i->j->k->j->k
		for (int p = 0; p < K; p++) {
			if (p & 1) {
				cout << j << " ";
			}
			else {
				cout << i << " ";
			}
		}
	}
}

// Function to print the right path
void printRightPath(int j, int k, int K)
{
	if (K & 1) {
		// j->i->j->i->j->k->j->k->j
		for (int p = 0; p < K; p++) {
			if (p & 1) {
				cout << k << " ";
			}
			else {
				cout << j << " ";
			}
		}
	}
	else {
		// i->j->i->j->k->j->k
		for (int p = 0; p < K; p++) {
			if (p & 1) {
				cout << k << " ";
			}
			else {
				cout << j << " ";
			}
		}
	}
}

// Function to check that
// if there exists a palindromic path
// in a binary graoh
void constructPalindromicPath(
	vector<pair<pair<int, int>, char> > edges,
	int n, int K)
{
	// Create adjacency matrix
	vector<vector<char> > adj(
		n + 1,
		vector<char>(n + 1));
	for (int i = 0; i < edges.size(); i++) {
		adj[edges[i]
				.first.first][edges[i]
								.first.second]
			= edges[i].second;
	}

	// If K is odd then
	// print the path directly by
	// choosing node 1 and 2 repeatedly
	if (K & 1) {
		cout << "YES" << endl;
		for (int i = 1; i <= K + 1; i++) {
			cout << (i & 1) + 1 << " ";
		}
		return;
	}

	// If K is even
	// Try to find an edge such that weight of
	// edge i->j and j->i is equal
	bool found = 0;
	int idx1, idx2;
	for (int i = 1; i <= n; i++) {
		for (int j = 1; j <= n; j++) {
			if (i == j) {
				continue;
			}
			if (adj[i][j] == adj[j][i]) {
				// Same weight edges are found
				found = 1;

				// Store their indexes
				idx1 = i, idx2 = j;
			}
		}
	}
	if (found) {
		// Print the path
		cout << "YES" << endl;
		for (int i = 1; i <= K + 1; i++) {
			if (i & 1) {
				cout << idx1 << " ";
			}
			else {
				cout << idx2 << " ";
			}
		}
		return;
	}

	// If nodes i, j having equal weight
	// on edges i->j and j->i can not
	// be found then try to find
	// three nodes i, j, k such that
	// weights of edges i->j
	// and j->k are equal
	else {

		// To store edges with weight '0'
		vector<int> mp1[n + 1];

		// To store edges with weight '1'
		vector<int> mp2[n + 1];

		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				if (i == j) {
					continue;
				}
				if (adj[i][j] == '0') {
					mp1[i].push_back(j);
				}
				else {
					mp2[i].push_back(j);
				}
			}
		}

		// Try to find edges i->j and
		// j->k having weight 0
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				if (j == i) {
					continue;
				}
				if (adj[i][j] == '0') {
					if (mp1[j].size()) {
						int k = mp1[j][0];
						if (k == i || k == j) {
							continue;
						}
						cout << "YES" << endl;
						K -= 2;
						K /= 2;

						// Print left Path
						printLeftPath(i, j, K);

						// Print centre
						cout << i << " "
							<< j << " " << k
							<< " ";

						// Print right path
						printRightPath(j, k, K);
						return;
					}
				}
			}
		}

		// Try to find edges i->j
		// and j->k which having
		// weight 1
		for (int i = 1; i <= n; i++) {
			for (int j = 1; j <= n; j++) {
				if (j == i) {
					continue;
				}
				if (adj[i][j] == '1') {
					if (mp1[j].size()) {
						int k = mp1[j][0];
						// cout<<k;
						if (k == i || k == j) {
							continue;
						}
						cout << "YES" << endl;
						K -= 2;
						K /= 2;
						printLeftPath(i, j, K);
						cout << i << " "
							<< j << " " << k
							<< " ";
						printRightPath(j, k, K);
						return;
					}
				}
			}
		}
	}
	cout << "NO";
}

// Driver Code
int main()
{
	int N = 3, K = 4;
	vector<pair<pair<int, int>, char> > edges
		= { { { 1, 2 }, '1' },
			{ { 1, 3 }, '1' },
			{ { 2, 1 }, '1' },
			{ { 2, 3 }, '1' },
			{ { 3, 1 }, '0' },
			{ { 3, 2 }, '0' } };

	constructPalindromicPath(edges, N, K);
}
